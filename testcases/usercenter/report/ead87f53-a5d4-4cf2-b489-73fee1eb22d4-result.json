{"name": "用户手机号登录", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001B2F1A43490>\ns = '<h1>Not Found</h1><p>The requested URL /LOGIN/ was not found on this server.</p>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.usercenter.test_user.TestUser object at 0x000001B2F448C1C0>\nusername = 17325220664, password = 123123\n\n    @pytest.mark.parametrize(\"username,password\", base_data.read_data()['user_login'])\n    @allure.story(\"用户登录\")\n    @allure.title(\"用户手机号登录\")\n    def test_login(self, username, password):\n>       result = login(username, password)\n\ntest_user.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\api\\user_api.py:41: in login\n    return process_response(response)\n..\\..\\utils\\response_util.py:14: in process_response\n    logger.info(\"接口返回的内容是>>>: \" + json.dumps(response.json(), ensure_ascii=False))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\models.py:975: JSONDecodeError"}, "attachments": [{"name": "log", "source": "358ccf01-1865-4040-8738-c0e7a688b509-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7103ce52-2d1e-47e6-847a-c66b18ef2003-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "17325220664"}, {"name": "password", "value": "123123"}], "start": 1703155132094, "stop": 1703155132164, "uuid": "e7d78456-0c1c-47a3-bdf9-82cc06bcada6", "historyId": "527cd4271f2715aed658a1c79847306f", "testCaseId": "18cc3eb427b1ac4ba4cd5ce6c4a3501c", "fullName": "testcases.usercenter.test_user.TestUser#test_login", "labels": [{"name": "feature", "value": "用户中心模块"}, {"name": "story", "value": "用户登录"}, {"name": "parentSuite", "value": "testcases.usercenter"}, {"name": "suite", "value": "test_user"}, {"name": "subSuite", "value": "TestUser"}, {"name": "host", "value": "14900K"}, {"name": "thread", "value": "15336-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.usercenter.test_user"}]}